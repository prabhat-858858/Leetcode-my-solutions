/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
      static String s;
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        
        Queue<TreeNode>q=new LinkedList<>();
         StringBuilder sb=new StringBuilder("");
         if(root==null){
            return "";
         }
        q.add(root);
        //s=s+(char)root.val;
        while(!q.isEmpty()){
           TreeNode curr= q.remove();
           if(curr==null){
             sb.append("null,");
             continue;
           }
           else{
            sb.append(curr.val+",");
           }
           q.add(curr.left);
           q.add(curr.right);
        }
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.length()==0){
            return null;
        }
        Queue<TreeNode>q=new LinkedList<>();
        //int idx=0;
        String[]val=data.split(",");
        TreeNode root=new TreeNode(Integer.parseInt(val[0]));
        q.add(root);
        for(int i=1;i<val.length;i++){
            TreeNode parent=q.remove();
            if(!val[i].equals("null")){
                TreeNode left=new TreeNode(Integer.parseInt(val[i]));
                parent.left=left;
                q.add(left);
            }
            if(!val[++i].equals("null")){
               TreeNode right=new TreeNode(Integer.parseInt(val[i]));
               parent.right=right;
               q.add(right);
            }
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
