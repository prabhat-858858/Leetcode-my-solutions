class Solution { 
    List<List<String>>li=new ArrayList<>();
    public List<List<String>> solveNQueens(int n) {
       char[][]board=new char[n][n];
       for(int i=0;i<board.length;i++){
         for(int j=0;j<n;j++){
            board[i][j]='.';
         }
       }
       queens(board,0); 

       return li;
    }

    public  void queens(char[][]board,int row){
        if(row==board.length){
            List<String>t=new ArrayList<>();
            for(int i=0;i<board.length;i++){
                 String s="";
                for(int j=0;j<board.length;j++){
                   
                    s=s+board[i][j];
                }
                t.add(s);
            }
            li.add(t);
            return ;
        }
        for(int i=0;i<board.length;i++){
            if(isSafe(board,row,i)){
            board[row][i]='Q';
            queens(board,row+1);
            board[row][i]='.';
            }
        }
    }
    public boolean isSafe(char[][]board,int row,int col){
        for(int i=row-1;i>=0;i--){
            if(board[i][col]=='Q'){
                return false;
            }

        }
        for(int i=row-1,j=col-1;i>=0&&j>=0;i--,j--){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        for(int i=row-1,j=col+1;i>=0&&j<board.length;i--,j++){
            if(board[i][j]=='Q'){
                return false;
            }
        }

        return true;
    }
}
